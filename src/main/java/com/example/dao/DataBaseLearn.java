package com.example.dao;

/**
 * Created by gsh on 2018/7/19.
 *
 *《MySQL扩展具体的实现方式》：关于数据库的扩展主要包括：1、业务拆分 2、主从复制 3、数据库分库与分表。
 * 一、业务拆分 - 由原来的单体应用根据业务进行拆分，进行微服务改造，每一个模块都使用单独的数据库来进行存储，不同的业务访问不同的数据库，系统的吞吐量自然就提高了。
 * 二、主从复制 -
 *    - 主要讲述了MySQL主从复制的原理：数据复制的实际就是Slave从Master获取Binary log文件，然后在 本地镜像 的执行日志中记录的操作。
 *                                 由于主从复制的过程是异步的，因此Slave和Master之间的数据 有可能存在延迟 的现象，此时只能保证数据 最终的一致性。
 * 三、数据库分库与分表
 *  1、分表实现策略 - 关键字：用户ID、表容量
 *     - 对于大部分数据库的设计和业务的操作基本都与用户的ID相关，因此使用用户ID是最常用的分表的路由策略。用户的ID可以作为贯穿整个系统用的重要字段。
 *       因此，使用用户的ID我们不仅可以方便我们的查询，还可以将数据平均的分配到不同的数据库中。
 *    - 接着上述电商平台假设，订单表order存放用户的订单数据 -
 *      当数据比较大的时候，对数据进行分表操作，首先要确定需要将数据平均分配到多少张表中，也就是：表容量。
 *      这里假设有100张表进行存储，则我们在进行存储数据的时候，首先对用户ID进行取模操作，根据 user_id%100 获取对应的表进行存储查询操作，
 * 注意：在实际的开发中，如果你使用MyBatis做持久层的话，MyBatis已经提供了很好得支持数据库分表的功能，例如上述sql用MyBatis实现的话应该是：
 *
 *  2、分库实现策略 - 用户ID、库容量
 *     - 数据库分表能够解决单表数据量很大的时候数据查询的效率问题，但是无法给数据库的并发操作带来效率上的提高，
 *       因为分表的实质还是在一个数据库上进行的操作，很容易受数据库IO性能的限制。
 *     - 分库策略与分表策略的实现很相似，最简单的都是可以通过 取模的方式 进行路由。
 *
 * 四、分库与分表实现策略
 *      - 上述的配置中，数据库分表可以解决 单表海量数据的查询性能问题，分库可以解决 单台数据库的并发访问压力问题。
 *      - 有时候，我们需要同时考虑这两个问题，因此，我们既需要对单表进行分表操作，还需要进行分库操作，以便同时扩展系统的并发处理能力和提升单表的查询性能，就是我们使用到的分库分表。
 *      - 分库分表的策略相对于前边两种复杂一些，一种常见的路由策略如下：
 *          １、中间变量　＝ user_id%（库数量*每个库的表数量）;
 *          ２、库序号　＝　取整（中间变量／每个库的表数量）; - 取整
 *          ３、表序号　＝　中间变量％每个库的表数量;       - 取模
 *       例如：数据库有256 个，每一个库中有1024个数据表，用户的user_id＝262145，按照上述的路由策略，可得：这样的话，对于user_id＝262145，将被路由到第０个数据库的第１个表中。
 *          １、中间变量　＝ 262145%（256*1024）= 1;
 *          ２、库序号　＝　取整（1／1024）= 0;
 *          ３、表序号　＝　1％1024 = 1;
 *
 *
 * 注意：
 *  - 最后需要指出的是，分库分表目前有很多的中间件可供选择，最常见的是使用淘宝的中间件Cobar。  还有MyCat
 *  - 上述的分库和分表操作，查询性能和并发能力都得到了提高，但是还有一些需要注意的就是，例如：1、原本跨表的事物变成了分布式事物；2、关联查询麻烦 3、数据迁移也变得麻烦了
 *  -
 *
 */
public class DataBaseLearn {

}
